% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Proxyzoo.R
\name{zoo_applyfix.Proxyzoo}
\alias{zoo_applyfix.Proxyzoo}
\title{Apply a function to data contained in a PTBoxProxydata::Proxyzoo (proxydata, agedata or both)}
\usage{
\method{zoo_applyfix}{Proxyzoo}(
  x,
  fun,
  case = "nmean",
  colsel = 1,
  seed = 0,
  recycle = "unique",
  ...
)
}
\arguments{
\item{x}{`Proxyzoo` object}

\item{fun}{function to apply on the data (has to expect and return a `zoo::zoo` object. For other input/output type see `Proxyzoo_apply` (tb implemeted))}

\item{case}{one of c('nmean', 'meanm', 'n1', '1m', 'oneone', 'nm'), see \emph{Details}}

\item{colsel}{integer, only effective for cases `m` or `n`}

\item{seed}{integer, only effective for case `oneone`, `NULL` turns off randomization (see \emph{Return} for `case = oneone`)}

\item{recycle}{logical, only effective for case `oneone`}

\item{...}{named arguments that are passed to fun}
}
\value{
Return cases:
\itemize{
\item{`nmean`: }{`Proxyzoo` with `proxydata()` as input and univariate `agedata()` of mean age of age models}
\item{`meanm`: }{`Proxyzoo` with with multivariate (!!) `proxydata()` as result of combination of mean of `proxy_name` colunms and age models as in input}
\item{`n`: }{as `nmean` but with `agedata()` as specified by `colsel`}
\item{`m`: }{`Proxyzoo` with multivariate (!!) `proxydata()`, recycling of one and the same `proxy_name` column for all age models}
\item{`oneone`: }{depending on `recycle`, either mxm or nxn `Proxyzoo` with column order corresponding to how `proxy_name` and age models have been combined in the processing. This is why it is not recommended to use a sequence of `prion` or `priom`. Instead initial calls to `priom` or `prion` are normally follwed only by further `unique` calls with `seed = NULL` (no randomization)}
\item{`nm`: }{to be determined, maybe list of `Proxyzoo`s?}
}

See \emph{Details} for possible combinations.
}
\description{
Apply a function to data contained in a PTBoxProxydata::Proxyzoo (proxydata, agedata or both)
}
\details{
Cases for combining proxydata (`n` `proxy_name`s) and agedata (`m` age models):
\itemize{
\item{`nmean`: }{apply fun on a all `proxy_name`s columns combined with `mean()` across all `m` age models (dim 2 of `agedata()`)}
\item{`meanm`: }{apply fun on a all age models columns combined with `mean()` across all `proxy_name` columns (dim 2 of `proxydata()`)}
\item{`n`: }{as `nmean` but for combination with `colsel` number of the age models (if available) }
\item{`m`: }{as `meanm` but for combination with `colsel` number of the proxy data column (if available)}
\item{`oneone`: }{apply function on one-to-one combinations of `proxy_name` columns from `proxydata()` and age models from `agedata()`. `seed` can be specified to guarantee reproducibility of combination. `recycle = priom` recycles age models as long as all `proxy_name` columns have been matched, `recycle = prion` recycles `proxy_name` columns as long as all age models have been matched, `unique` stops combining as soon as either all `proxy_name` columns or age models have been sampled without replacement.}
\item{`nm`: }{apply function across all possible combinations of `proxy_name` columns and age model in `agedata()`}
}

See \emph{Value} for returns.
}
\section{Note}{
 
Outputs do not necessarily maintain the same dimensions as inputs (a) because of the different `case`s and (b) because some zoo methods (e.g. interpolation) result in changed time axes that are propagated into the output `Proxyzoo`.
}

